{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /* Mock MMKV instance for use in tests */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createMockMMKV = void 0;\n  const createMockMMKV = () => {\n    const storage = new Map();\n    return {\n      clearAll: () => storage.clear(),\n      delete: key => storage.delete(key),\n      set: (key, value) => storage.set(key, value),\n      getString: key => {\n        const result = storage.get(key);\n        return typeof result === 'string' ? result : undefined;\n      },\n      getNumber: key => {\n        const result = storage.get(key);\n        return typeof result === 'number' ? result : undefined;\n      },\n      getBoolean: key => {\n        const result = storage.get(key);\n        return typeof result === 'boolean' ? result : undefined;\n      },\n      getBuffer: key => {\n        const result = storage.get(key);\n        return result instanceof ArrayBuffer ? result : undefined;\n      },\n      getAllKeys: () => Array.from(storage.keys()),\n      contains: key => storage.has(key),\n      recrypt: () => {\n        console.warn('Encryption is not supported in mocked MMKV instances!');\n      },\n      size: 0,\n      isReadOnly: false,\n      trim: () => {\n        // no-op\n      }\n    };\n  };\n  exports.createMockMMKV = createMockMMKV;\n});","lineCount":44,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,3,0,"Object"],[5,8,3,0],[5,9,3,0,"defineProperty"],[5,23,3,0],[5,24,3,0,"exports"],[5,31,3,0],[6,4,3,0,"value"],[6,9,3,0],[7,2,3,0],[8,2,3,0,"exports"],[8,9,3,0],[8,10,3,0,"createMockMMKV"],[8,24,3,0],[9,2,4,7],[9,8,4,13,"createMockMMKV"],[9,22,4,27],[9,25,4,30,"createMockMMKV"],[9,26,4,30],[9,31,4,36],[10,4,5,2],[10,10,5,8,"storage"],[10,17,5,15],[10,20,5,18],[10,24,5,22,"Map"],[10,27,5,25],[10,28,5,26],[10,29,5,27],[11,4,6,2],[11,11,6,9],[12,6,7,4,"clearAll"],[12,14,7,12],[12,16,7,14,"clearAll"],[12,17,7,14],[12,22,7,20,"storage"],[12,29,7,27],[12,30,7,28,"clear"],[12,35,7,33],[12,36,7,34],[12,37,7,35],[13,6,8,4,"delete"],[13,12,8,10],[13,14,8,12,"key"],[13,17,8,15],[13,21,8,19,"storage"],[13,28,8,26],[13,29,8,27,"delete"],[13,35,8,33],[13,36,8,34,"key"],[13,39,8,37],[13,40,8,38],[14,6,9,4,"set"],[14,9,9,7],[14,11,9,9,"set"],[14,12,9,10,"key"],[14,15,9,13],[14,17,9,15,"value"],[14,22,9,20],[14,27,9,25,"storage"],[14,34,9,32],[14,35,9,33,"set"],[14,38,9,36],[14,39,9,37,"key"],[14,42,9,40],[14,44,9,42,"value"],[14,49,9,47],[14,50,9,48],[15,6,10,4,"getString"],[15,15,10,13],[15,17,10,15,"key"],[15,20,10,18],[15,24,10,22],[16,8,11,6],[16,14,11,12,"result"],[16,20,11,18],[16,23,11,21,"storage"],[16,30,11,28],[16,31,11,29,"get"],[16,34,11,32],[16,35,11,33,"key"],[16,38,11,36],[16,39,11,37],[17,8,12,6],[17,15,12,13],[17,22,12,20,"result"],[17,28,12,26],[17,33,12,31],[17,41,12,39],[17,44,12,42,"result"],[17,50,12,48],[17,53,12,51,"undefined"],[17,62,12,60],[18,6,13,4],[18,7,13,5],[19,6,14,4,"getNumber"],[19,15,14,13],[19,17,14,15,"key"],[19,20,14,18],[19,24,14,22],[20,8,15,6],[20,14,15,12,"result"],[20,20,15,18],[20,23,15,21,"storage"],[20,30,15,28],[20,31,15,29,"get"],[20,34,15,32],[20,35,15,33,"key"],[20,38,15,36],[20,39,15,37],[21,8,16,6],[21,15,16,13],[21,22,16,20,"result"],[21,28,16,26],[21,33,16,31],[21,41,16,39],[21,44,16,42,"result"],[21,50,16,48],[21,53,16,51,"undefined"],[21,62,16,60],[22,6,17,4],[22,7,17,5],[23,6,18,4,"getBoolean"],[23,16,18,14],[23,18,18,16,"key"],[23,21,18,19],[23,25,18,23],[24,8,19,6],[24,14,19,12,"result"],[24,20,19,18],[24,23,19,21,"storage"],[24,30,19,28],[24,31,19,29,"get"],[24,34,19,32],[24,35,19,33,"key"],[24,38,19,36],[24,39,19,37],[25,8,20,6],[25,15,20,13],[25,22,20,20,"result"],[25,28,20,26],[25,33,20,31],[25,42,20,40],[25,45,20,43,"result"],[25,51,20,49],[25,54,20,52,"undefined"],[25,63,20,61],[26,6,21,4],[26,7,21,5],[27,6,22,4,"getBuffer"],[27,15,22,13],[27,17,22,15,"key"],[27,20,22,18],[27,24,22,22],[28,8,23,6],[28,14,23,12,"result"],[28,20,23,18],[28,23,23,21,"storage"],[28,30,23,28],[28,31,23,29,"get"],[28,34,23,32],[28,35,23,33,"key"],[28,38,23,36],[28,39,23,37],[29,8,24,6],[29,15,24,13,"result"],[29,21,24,19],[29,33,24,31,"ArrayBuffer"],[29,44,24,42],[29,47,24,45,"result"],[29,53,24,51],[29,56,24,54,"undefined"],[29,65,24,63],[30,6,25,4],[30,7,25,5],[31,6,26,4,"getAllKeys"],[31,16,26,14],[31,18,26,16,"getAllKeys"],[31,19,26,16],[31,24,26,22,"Array"],[31,29,26,27],[31,30,26,28,"from"],[31,34,26,32],[31,35,26,33,"storage"],[31,42,26,40],[31,43,26,41,"keys"],[31,47,26,45],[31,48,26,46],[31,49,26,47],[31,50,26,48],[32,6,27,4,"contains"],[32,14,27,12],[32,16,27,14,"key"],[32,19,27,17],[32,23,27,21,"storage"],[32,30,27,28],[32,31,27,29,"has"],[32,34,27,32],[32,35,27,33,"key"],[32,38,27,36],[32,39,27,37],[33,6,28,4,"recrypt"],[33,13,28,11],[33,15,28,13,"recrypt"],[33,16,28,13],[33,21,28,19],[34,8,29,6,"console"],[34,15,29,13],[34,16,29,14,"warn"],[34,20,29,18],[34,21,29,19],[34,76,29,74],[34,77,29,75],[35,6,30,4],[35,7,30,5],[36,6,31,4,"size"],[36,10,31,8],[36,12,31,10],[36,13,31,11],[37,6,32,4,"isReadOnly"],[37,16,32,14],[37,18,32,16],[37,23,32,21],[38,6,33,4,"trim"],[38,10,33,8],[38,12,33,10,"trim"],[38,13,33,10],[38,18,33,16],[39,8,34,6],[40,6,34,6],[41,4,36,2],[41,5,36,3],[42,2,37,0],[42,3,37,1],[43,2,37,2,"exports"],[43,9,37,2],[43,10,37,2,"createMockMMKV"],[43,24,37,2],[43,27,37,2,"createMockMMKV"],[43,41,37,2],[44,0,37,2],[44,3]],"functionMap":{"names":["<global>","createMockMMKV","clearAll","_delete","set","getString","getNumber","getBoolean","getBuffer","getAllKeys","contains","recrypt","trim"],"mappings":"AAA;8BCG;cCG,qBD;YEC,0BF;SGC,uCH;eIC;KJG;eKC;KLG;gBMC;KNG;eOC;KPG;gBQC,gCR;cSC,uBT;aUC;KVE;UWG;KXE;CDE"}},"type":"js/module"}]}