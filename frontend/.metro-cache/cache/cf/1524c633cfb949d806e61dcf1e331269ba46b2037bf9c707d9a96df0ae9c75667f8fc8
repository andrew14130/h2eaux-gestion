{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":74,"index":74}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"./MMKV","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":75},"end":{"line":2,"column":30,"index":105}}],"key":"zsqLD+ndfCbLd9bUBNNVv1kLmhE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useMMKV = useMMKV;\n  exports.useMMKVBuffer = exports.useMMKVBoolean = void 0;\n  exports.useMMKVListener = useMMKVListener;\n  exports.useMMKVNumber = void 0;\n  exports.useMMKVObject = useMMKVObject;\n  exports.useMMKVString = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _react = require(_dependencyMap[2], \"react\");\n  var _MMKV = require(_dependencyMap[3], \"./MMKV\");\n  function isConfigurationEqual(left, right) {\n    if (left == null || right == null) return left == null && right == null;\n    return left.encryptionKey === right.encryptionKey && left.id === right.id && left.path === right.path && left.mode === right.mode;\n  }\n  var defaultInstance = null;\n  function getDefaultInstance() {\n    if (defaultInstance == null) {\n      defaultInstance = new _MMKV.MMKV();\n    }\n    return defaultInstance;\n  }\n\n  /**\n   * Use the default, shared MMKV instance.\n   */\n\n  /**\n   * Use a custom MMKV instance with the given configuration.\n   * @param configuration The configuration to initialize the MMKV instance with. Does not have to be memoized.\n   */\n\n  function useMMKV(configuration) {\n    var instance = (0, _react.useRef)();\n    var lastConfiguration = (0, _react.useRef)();\n    if (configuration == null) return getDefaultInstance();\n    if (instance.current == null || !isConfigurationEqual(lastConfiguration.current, configuration)) {\n      lastConfiguration.current = configuration;\n      instance.current = new _MMKV.MMKV(configuration);\n    }\n    return instance.current;\n  }\n  function createMMKVHook(getter) {\n    return (key, instance) => {\n      var mmkv = instance ?? getDefaultInstance();\n      var _useState = (0, _react.useState)(0),\n        _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n        bump = _useState2[0],\n        setBump = _useState2[1];\n      var value = (0, _react.useMemo)(() => {\n        // bump is here as an additional outside dependency, so this useMemo\n        // re-computes the value each time bump changes, effectively acting as a hint\n        // that the outside value (storage) has changed. setting bump refreshes this value.\n        bump;\n        return getter(mmkv, key);\n      }, [mmkv, key, bump]);\n\n      // update value by user set\n      var set = (0, _react.useCallback)(v => {\n        var newValue = typeof v === 'function' ? v(getter(mmkv, key)) : v;\n        switch (typeof newValue) {\n          case 'number':\n          case 'string':\n          case 'boolean':\n            mmkv.set(key, newValue);\n            break;\n          case 'undefined':\n            mmkv.delete(key);\n            break;\n          case 'object':\n            if (newValue instanceof ArrayBuffer) {\n              mmkv.set(key, newValue);\n              break;\n            } else {\n              throw new Error(`MMKV: Type object (${newValue}) is not supported!`);\n            }\n          default:\n            throw new Error(`MMKV: Type ${typeof newValue} is not supported!`);\n        }\n      }, [key, mmkv]);\n\n      // update value if it changes somewhere else (second hook, same key)\n      (0, _react.useEffect)(() => {\n        var listener = mmkv.addOnValueChangedListener(changedKey => {\n          if (changedKey === key) {\n            setBump(b => b + 1);\n          }\n        });\n        return () => listener.remove();\n      }, [key, mmkv]);\n      return [value, set];\n    };\n  }\n\n  /**\n   * Use the string value of the given `key` from the given MMKV storage instance.\n   *\n   * If no instance is provided, a shared default instance will be used.\n   *\n   * @example\n   * ```ts\n   * const [username, setUsername] = useMMKVString(\"user.name\")\n   * ```\n   */\n  var useMMKVString = exports.useMMKVString = createMMKVHook((instance, key) => instance.getString(key));\n\n  /**\n   * Use the number value of the given `key` from the given MMKV storage instance.\n   *\n   * If no instance is provided, a shared default instance will be used.\n   *\n   * @example\n   * ```ts\n   * const [age, setAge] = useMMKVNumber(\"user.age\")\n   * ```\n   */\n  var useMMKVNumber = exports.useMMKVNumber = createMMKVHook((instance, key) => instance.getNumber(key));\n  /**\n   * Use the boolean value of the given `key` from the given MMKV storage instance.\n   *\n   * If no instance is provided, a shared default instance will be used.\n   *\n   * @example\n   * ```ts\n   * const [isPremiumAccount, setIsPremiumAccount] = useMMKVBoolean(\"user.isPremium\")\n   * ```\n   */\n  var useMMKVBoolean = exports.useMMKVBoolean = createMMKVHook((instance, key) => instance.getBoolean(key));\n  /**\n   * Use the buffer value (unsigned 8-bit (0-255)) of the given `key` from the given MMKV storage instance.\n   *\n   * If no instance is provided, a shared default instance will be used.\n   *\n   * @example\n   * ```ts\n   * const [privateKey, setPrivateKey] = useMMKVBuffer(\"user.privateKey\")\n   * ```\n   */\n  var useMMKVBuffer = exports.useMMKVBuffer = createMMKVHook((instance, key) => instance.getBuffer(key));\n  /**\n   * Use an object value of the given `key` from the given MMKV storage instance.\n   *\n   * If no instance is provided, a shared default instance will be used.\n   *\n   * The object will be serialized using `JSON`.\n   *\n   * @example\n   * ```ts\n   * const [user, setUser] = useMMKVObject<User>(\"user\")\n   * ```\n   */\n  function useMMKVObject(key, instance) {\n    var _useMMKVString = useMMKVString(key, instance),\n      _useMMKVString2 = (0, _slicedToArray2.default)(_useMMKVString, 2),\n      json = _useMMKVString2[0],\n      setJson = _useMMKVString2[1];\n    var value = (0, _react.useMemo)(() => {\n      if (json == null) return undefined;\n      return JSON.parse(json);\n    }, [json]);\n    var setValue = (0, _react.useCallback)(v => {\n      if (v instanceof Function) {\n        setJson(currentJson => {\n          var currentValue = currentJson != null ? JSON.parse(currentJson) : undefined;\n          var newValue = v(currentValue);\n          // Store the Object as a serialized Value or clear the value\n          return newValue != null ? JSON.stringify(newValue) : undefined;\n        });\n      } else {\n        // Store the Object as a serialized Value or clear the value\n        var newValue = v != null ? JSON.stringify(v) : undefined;\n        setJson(newValue);\n      }\n    }, [setJson]);\n    return [value, setValue];\n  }\n\n  /**\n   * Listen for changes in the given MMKV storage instance.\n   * If no instance is passed, the default instance will be used.\n   * @param valueChangedListener The function to call whenever a value inside the storage instance changes\n   * @param instance The instance to listen to changes to (or the default instance)\n   *\n   * @example\n   * ```ts\n   * useMMKVListener((key) => {\n   *   console.log(`Value for \"${key}\" changed!`)\n   * })\n   * ```\n   */\n  function useMMKVListener(valueChangedListener, instance) {\n    var ref = (0, _react.useRef)(valueChangedListener);\n    ref.current = valueChangedListener;\n    var mmkv = instance ?? getDefaultInstance();\n    (0, _react.useEffect)(() => {\n      var listener = mmkv.addOnValueChangedListener(changedKey => {\n        ref.current(changedKey);\n      });\n      return () => listener.remove();\n    }, [mmkv]);\n  }\n});","lineCount":205,"map":[[13,2,1,0],[13,6,1,0,"_react"],[13,12,1,0],[13,15,1,0,"require"],[13,22,1,0],[13,23,1,0,"_dependencyMap"],[13,37,1,0],[14,2,2,0],[14,6,2,0,"_MMKV"],[14,11,2,0],[14,14,2,0,"require"],[14,21,2,0],[14,22,2,0,"_dependencyMap"],[14,36,2,0],[15,2,5,0],[15,11,5,9,"isConfigurationEqual"],[15,31,5,29,"isConfigurationEqual"],[15,32,6,2,"left"],[15,36,6,22],[15,38,7,2,"right"],[15,43,7,23],[15,45,8,11],[16,4,9,2],[16,8,9,6,"left"],[16,12,9,10],[16,16,9,14],[16,20,9,18],[16,24,9,22,"right"],[16,29,9,27],[16,33,9,31],[16,37,9,35],[16,39,9,37],[16,46,9,44,"left"],[16,50,9,48],[16,54,9,52],[16,58,9,56],[16,62,9,60,"right"],[16,67,9,65],[16,71,9,69],[16,75,9,73],[17,4,11,2],[17,11,12,4,"left"],[17,15,12,8],[17,16,12,9,"encryptionKey"],[17,29,12,22],[17,34,12,27,"right"],[17,39,12,32],[17,40,12,33,"encryptionKey"],[17,53,12,46],[17,57,13,4,"left"],[17,61,13,8],[17,62,13,9,"id"],[17,64,13,11],[17,69,13,16,"right"],[17,74,13,21],[17,75,13,22,"id"],[17,77,13,24],[17,81,14,4,"left"],[17,85,14,8],[17,86,14,9,"path"],[17,90,14,13],[17,95,14,18,"right"],[17,100,14,23],[17,101,14,24,"path"],[17,105,14,28],[17,109,15,4,"left"],[17,113,15,8],[17,114,15,9,"mode"],[17,118,15,13],[17,123,15,18,"right"],[17,128,15,23],[17,129,15,24,"mode"],[17,133,15,28],[18,2,17,0],[19,2,19,0],[19,6,19,4,"defaultInstance"],[19,21,19,32],[19,24,19,35],[19,28,19,39],[20,2,20,0],[20,11,20,9,"getDefaultInstance"],[20,29,20,27,"getDefaultInstance"],[20,30,20,27],[20,32,20,36],[21,4,21,2],[21,8,21,6,"defaultInstance"],[21,23,21,21],[21,27,21,25],[21,31,21,29],[21,33,21,31],[22,6,22,4,"defaultInstance"],[22,21,22,19],[22,24,22,22],[22,28,22,26,"MMKV"],[22,38,22,30],[22,39,22,31],[22,40,22,32],[23,4,23,2],[24,4,24,2],[24,11,24,9,"defaultInstance"],[24,26,24,24],[25,2,25,0],[27,2,27,0],[28,0,28,0],[29,0,29,0],[31,2,31,0],[32,0,32,0],[33,0,33,0],[34,0,34,0],[36,2,36,7],[36,11,36,16,"useMMKV"],[36,18,36,23,"useMMKV"],[36,19,36,24,"configuration"],[36,32,36,53],[36,34,36,61],[37,4,37,2],[37,8,37,8,"instance"],[37,16,37,16],[37,19,37,19],[37,23,37,19,"useRef"],[37,36,37,25],[37,38,37,32],[37,39,37,33],[38,4,38,2],[38,8,38,8,"lastConfiguration"],[38,25,38,25],[38,28,38,28],[38,32,38,28,"useRef"],[38,45,38,34],[38,47,38,50],[38,48,38,51],[39,4,40,2],[39,8,40,6,"configuration"],[39,21,40,19],[39,25,40,23],[39,29,40,27],[39,31,40,29],[39,38,40,36,"getDefaultInstance"],[39,56,40,54],[39,57,40,55],[39,58,40,56],[40,4,42,2],[40,8,43,4,"instance"],[40,16,43,12],[40,17,43,13,"current"],[40,24,43,20],[40,28,43,24],[40,32,43,28],[40,36,44,4],[40,37,44,5,"isConfigurationEqual"],[40,57,44,25],[40,58,44,26,"lastConfiguration"],[40,75,44,43],[40,76,44,44,"current"],[40,83,44,51],[40,85,44,53,"configuration"],[40,98,44,66],[40,99,44,67],[40,101,45,4],[41,6,46,4,"lastConfiguration"],[41,23,46,21],[41,24,46,22,"current"],[41,31,46,29],[41,34,46,32,"configuration"],[41,47,46,45],[42,6,47,4,"instance"],[42,14,47,12],[42,15,47,13,"current"],[42,22,47,20],[42,25,47,23],[42,29,47,27,"MMKV"],[42,39,47,31],[42,40,47,32,"configuration"],[42,53,47,45],[42,54,47,46],[43,4,48,2],[44,4,50,2],[44,11,50,9,"instance"],[44,19,50,17],[44,20,50,18,"current"],[44,27,50,25],[45,2,51,0],[46,2,53,0],[46,11,53,9,"createMMKVHook"],[46,25,53,23,"createMMKVHook"],[46,26,57,2,"getter"],[46,32,57,44],[46,34,57,46],[47,4,58,2],[47,11,58,9],[47,12,59,4,"key"],[47,15,59,15],[47,17,60,4,"instance"],[47,25,60,19],[47,30,61,58],[48,6,62,4],[48,10,62,10,"mmkv"],[48,14,62,14],[48,17,62,17,"instance"],[48,25,62,25],[48,29,62,29,"getDefaultInstance"],[48,47,62,47],[48,48,62,48],[48,49,62,49],[49,6,64,4],[49,10,64,4,"_useState"],[49,19,64,4],[49,22,64,28],[49,26,64,28,"useState"],[49,41,64,36],[49,43,64,37],[49,44,64,38],[49,45,64,39],[50,8,64,39,"_useState2"],[50,18,64,39],[50,25,64,39,"_slicedToArray2"],[50,40,64,39],[50,41,64,39,"default"],[50,48,64,39],[50,50,64,39,"_useState"],[50,59,64,39],[51,8,64,11,"bump"],[51,12,64,15],[51,15,64,15,"_useState2"],[51,25,64,15],[52,8,64,17,"setBump"],[52,15,64,24],[52,18,64,24,"_useState2"],[52,28,64,24],[53,6,65,4],[53,10,65,10,"value"],[53,15,65,15],[53,18,65,18],[53,22,65,18,"useMemo"],[53,36,65,25],[53,38,65,26],[53,44,65,32],[54,8,66,6],[55,8,67,6],[56,8,68,6],[57,8,69,6,"bump"],[57,12,69,10],[58,8,70,6],[58,15,70,13,"getter"],[58,21,70,19],[58,22,70,20,"mmkv"],[58,26,70,24],[58,28,70,26,"key"],[58,31,70,29],[58,32,70,30],[59,6,71,4],[59,7,71,5],[59,9,71,7],[59,10,71,8,"mmkv"],[59,14,71,12],[59,16,71,14,"key"],[59,19,71,17],[59,21,71,19,"bump"],[59,25,71,23],[59,26,71,24],[59,27,71,25],[61,6,73,4],[62,6,74,4],[62,10,74,10,"set"],[62,13,74,13],[62,16,74,16],[62,20,74,16,"useCallback"],[62,38,74,27],[62,40,75,7,"v"],[62,41,75,20],[62,45,75,25],[63,8,76,8],[63,12,76,14,"newValue"],[63,20,76,22],[63,23,76,25],[63,30,76,32,"v"],[63,31,76,33],[63,36,76,38],[63,46,76,48],[63,49,76,51,"v"],[63,50,76,52],[63,51,76,53,"getter"],[63,57,76,59],[63,58,76,60,"mmkv"],[63,62,76,64],[63,64,76,66,"key"],[63,67,76,69],[63,68,76,70],[63,69,76,71],[63,72,76,74,"v"],[63,73,76,75],[64,8,77,8],[64,16,77,16],[64,23,77,23,"newValue"],[64,31,77,31],[65,10,78,10],[65,15,78,15],[65,23,78,23],[66,10,79,10],[66,15,79,15],[66,23,79,23],[67,10,80,10],[67,15,80,15],[67,24,80,24],[68,12,81,12,"mmkv"],[68,16,81,16],[68,17,81,17,"set"],[68,20,81,20],[68,21,81,21,"key"],[68,24,81,24],[68,26,81,26,"newValue"],[68,34,81,34],[68,35,81,35],[69,12,82,12],[70,10,83,10],[70,15,83,15],[70,26,83,26],[71,12,84,12,"mmkv"],[71,16,84,16],[71,17,84,17,"delete"],[71,23,84,23],[71,24,84,24,"key"],[71,27,84,27],[71,28,84,28],[72,12,85,12],[73,10,86,10],[73,15,86,15],[73,23,86,23],[74,12,87,12],[74,16,87,16,"newValue"],[74,24,87,24],[74,36,87,36,"ArrayBuffer"],[74,47,87,47],[74,49,87,49],[75,14,88,14,"mmkv"],[75,18,88,18],[75,19,88,19,"set"],[75,22,88,22],[75,23,88,23,"key"],[75,26,88,26],[75,28,88,28,"newValue"],[75,36,88,36],[75,37,88,37],[76,14,89,14],[77,12,90,12],[77,13,90,13],[77,19,90,19],[78,14,91,14],[78,20,91,20],[78,24,91,24,"Error"],[78,29,91,29],[78,30,92,16],[78,52,92,38,"newValue"],[78,60,92,46],[78,81,93,14],[78,82,93,15],[79,12,94,12],[80,10,95,10],[81,12,96,12],[81,18,96,18],[81,22,96,22,"Error"],[81,27,96,27],[81,28,96,28],[81,42,96,42],[81,49,96,49,"newValue"],[81,57,96,57],[81,77,96,77],[81,78,96,78],[82,8,97,8],[83,6,98,6],[83,7,98,7],[83,9,99,6],[83,10,99,7,"key"],[83,13,99,10],[83,15,99,12,"mmkv"],[83,19,99,16],[83,20,100,4],[83,21,100,5],[85,6,102,4],[86,6,103,4],[86,10,103,4,"useEffect"],[86,26,103,13],[86,28,103,14],[86,34,103,20],[87,8,104,6],[87,12,104,12,"listener"],[87,20,104,20],[87,23,104,23,"mmkv"],[87,27,104,27],[87,28,104,28,"addOnValueChangedListener"],[87,53,104,53],[87,54,104,55,"changedKey"],[87,64,104,65],[87,68,104,70],[88,10,105,8],[88,14,105,12,"changedKey"],[88,24,105,22],[88,29,105,27,"key"],[88,32,105,30],[88,34,105,32],[89,12,106,10,"setBump"],[89,19,106,17],[89,20,106,19,"b"],[89,21,106,20],[89,25,106,25,"b"],[89,26,106,26],[89,29,106,29],[89,30,106,30],[89,31,106,31],[90,10,107,8],[91,8,108,6],[91,9,108,7],[91,10,108,8],[92,8,109,6],[92,15,109,13],[92,21,109,19,"listener"],[92,29,109,27],[92,30,109,28,"remove"],[92,36,109,34],[92,37,109,35],[92,38,109,36],[93,6,110,4],[93,7,110,5],[93,9,110,7],[93,10,110,8,"key"],[93,13,110,11],[93,15,110,13,"mmkv"],[93,19,110,17],[93,20,110,18],[93,21,110,19],[94,6,112,4],[94,13,112,11],[94,14,112,12,"value"],[94,19,112,17],[94,21,112,19,"set"],[94,24,112,22],[94,25,112,23],[95,4,113,2],[95,5,113,3],[96,2,114,0],[98,2,116,0],[99,0,117,0],[100,0,118,0],[101,0,119,0],[102,0,120,0],[103,0,121,0],[104,0,122,0],[105,0,123,0],[106,0,124,0],[107,0,125,0],[108,2,126,7],[108,6,126,13,"useMMKVString"],[108,19,126,26],[108,22,126,26,"exports"],[108,29,126,26],[108,30,126,26,"useMMKVString"],[108,43,126,26],[108,46,126,29,"createMMKVHook"],[108,60,126,43],[108,61,126,44],[108,62,126,45,"instance"],[108,70,126,53],[108,72,126,55,"key"],[108,75,126,58],[108,80,127,2,"instance"],[108,88,127,10],[108,89,127,11,"getString"],[108,98,127,20],[108,99,127,21,"key"],[108,102,127,24],[108,103,128,0],[108,104,128,1],[110,2,130,0],[111,0,131,0],[112,0,132,0],[113,0,133,0],[114,0,134,0],[115,0,135,0],[116,0,136,0],[117,0,137,0],[118,0,138,0],[119,0,139,0],[120,2,140,7],[120,6,140,13,"useMMKVNumber"],[120,19,140,26],[120,22,140,26,"exports"],[120,29,140,26],[120,30,140,26,"useMMKVNumber"],[120,43,140,26],[120,46,140,29,"createMMKVHook"],[120,60,140,43],[120,61,140,44],[120,62,140,45,"instance"],[120,70,140,53],[120,72,140,55,"key"],[120,75,140,58],[120,80,141,2,"instance"],[120,88,141,10],[120,89,141,11,"getNumber"],[120,98,141,20],[120,99,141,21,"key"],[120,102,141,24],[120,103,142,0],[120,104,142,1],[121,2,143,0],[122,0,144,0],[123,0,145,0],[124,0,146,0],[125,0,147,0],[126,0,148,0],[127,0,149,0],[128,0,150,0],[129,0,151,0],[130,0,152,0],[131,2,153,7],[131,6,153,13,"useMMKVBoolean"],[131,20,153,27],[131,23,153,27,"exports"],[131,30,153,27],[131,31,153,27,"useMMKVBoolean"],[131,45,153,27],[131,48,153,30,"createMMKVHook"],[131,62,153,44],[131,63,153,45],[131,64,153,46,"instance"],[131,72,153,54],[131,74,153,56,"key"],[131,77,153,59],[131,82,154,2,"instance"],[131,90,154,10],[131,91,154,11,"getBoolean"],[131,101,154,21],[131,102,154,22,"key"],[131,105,154,25],[131,106,155,0],[131,107,155,1],[132,2,156,0],[133,0,157,0],[134,0,158,0],[135,0,159,0],[136,0,160,0],[137,0,161,0],[138,0,162,0],[139,0,163,0],[140,0,164,0],[141,0,165,0],[142,2,166,7],[142,6,166,13,"useMMKVBuffer"],[142,19,166,26],[142,22,166,26,"exports"],[142,29,166,26],[142,30,166,26,"useMMKVBuffer"],[142,43,166,26],[142,46,166,29,"createMMKVHook"],[142,60,166,43],[142,61,166,44],[142,62,166,45,"instance"],[142,70,166,53],[142,72,166,55,"key"],[142,75,166,58],[142,80,167,2,"instance"],[142,88,167,10],[142,89,167,11,"getBuffer"],[142,98,167,20],[142,99,167,21,"key"],[142,102,167,24],[142,103,168,0],[142,104,168,1],[143,2,169,0],[144,0,170,0],[145,0,171,0],[146,0,172,0],[147,0,173,0],[148,0,174,0],[149,0,175,0],[150,0,176,0],[151,0,177,0],[152,0,178,0],[153,0,179,0],[154,0,180,0],[155,2,181,7],[155,11,181,16,"useMMKVObject"],[155,24,181,29,"useMMKVObject"],[155,25,182,2,"key"],[155,28,182,13],[155,30,183,2,"instance"],[155,38,183,17],[155,40,189,2],[156,4,190,2],[156,8,190,2,"_useMMKVString"],[156,22,190,2],[156,25,190,26,"useMMKVString"],[156,38,190,39],[156,39,190,40,"key"],[156,42,190,43],[156,44,190,45,"instance"],[156,52,190,53],[156,53,190,54],[157,6,190,54,"_useMMKVString2"],[157,21,190,54],[157,28,190,54,"_slicedToArray2"],[157,43,190,54],[157,44,190,54,"default"],[157,51,190,54],[157,53,190,54,"_useMMKVString"],[157,67,190,54],[158,6,190,9,"json"],[158,10,190,13],[158,13,190,13,"_useMMKVString2"],[158,28,190,13],[159,6,190,15,"setJson"],[159,13,190,22],[159,16,190,22,"_useMMKVString2"],[159,31,190,22],[160,4,192,2],[160,8,192,8,"value"],[160,13,192,13],[160,16,192,16],[160,20,192,16,"useMemo"],[160,34,192,23],[160,36,192,24],[160,42,192,30],[161,6,193,4],[161,10,193,8,"json"],[161,14,193,12],[161,18,193,16],[161,22,193,20],[161,24,193,22],[161,31,193,29,"undefined"],[161,40,193,38],[162,6,194,4],[162,13,194,11,"JSON"],[162,17,194,15],[162,18,194,16,"parse"],[162,23,194,21],[162,24,194,22,"json"],[162,28,194,26],[162,29,194,27],[163,4,195,2],[163,5,195,3],[163,7,195,5],[163,8,195,6,"json"],[163,12,195,10],[163,13,195,11],[163,14,195,12],[164,4,197,2],[164,8,197,8,"setValue"],[164,16,197,16],[164,19,197,19],[164,23,197,19,"useCallback"],[164,41,197,30],[164,43,198,5,"v"],[164,44,198,66],[164,48,198,71],[165,6,199,6],[165,10,199,10,"v"],[165,11,199,11],[165,23,199,23,"Function"],[165,31,199,31],[165,33,199,33],[166,8,200,8,"setJson"],[166,15,200,15],[166,16,200,17,"currentJson"],[166,27,200,28],[166,31,200,33],[167,10,201,10],[167,14,201,16,"currentValue"],[167,26,201,28],[167,29,202,12,"currentJson"],[167,40,202,23],[167,44,202,27],[167,48,202,31],[167,51,202,35,"JSON"],[167,55,202,39],[167,56,202,40,"parse"],[167,61,202,45],[167,62,202,46,"currentJson"],[167,73,202,57],[167,74,202,58],[167,77,202,67,"undefined"],[167,86,202,76],[168,10,203,10],[168,14,203,16,"newValue"],[168,22,203,24],[168,25,203,27,"v"],[168,26,203,28],[168,27,203,29,"currentValue"],[168,39,203,41],[168,40,203,42],[169,10,204,10],[170,10,205,10],[170,17,205,17,"newValue"],[170,25,205,25],[170,29,205,29],[170,33,205,33],[170,36,205,36,"JSON"],[170,40,205,40],[170,41,205,41,"stringify"],[170,50,205,50],[170,51,205,51,"newValue"],[170,59,205,59],[170,60,205,60],[170,63,205,63,"undefined"],[170,72,205,72],[171,8,206,8],[171,9,206,9],[171,10,206,10],[172,6,207,6],[172,7,207,7],[172,13,207,13],[173,8,208,8],[174,8,209,8],[174,12,209,14,"newValue"],[174,20,209,22],[174,23,209,25,"v"],[174,24,209,26],[174,28,209,30],[174,32,209,34],[174,35,209,37,"JSON"],[174,39,209,41],[174,40,209,42,"stringify"],[174,49,209,51],[174,50,209,52,"v"],[174,51,209,53],[174,52,209,54],[174,55,209,57,"undefined"],[174,64,209,66],[175,8,210,8,"setJson"],[175,15,210,15],[175,16,210,16,"newValue"],[175,24,210,24],[175,25,210,25],[176,6,211,6],[177,4,212,4],[177,5,212,5],[177,7,213,4],[177,8,213,5,"setJson"],[177,15,213,12],[177,16,214,2],[177,17,214,3],[178,4,216,2],[178,11,216,9],[178,12,216,10,"value"],[178,17,216,15],[178,19,216,17,"setValue"],[178,27,216,25],[178,28,216,26],[179,2,217,0],[181,2,219,0],[182,0,220,0],[183,0,221,0],[184,0,222,0],[185,0,223,0],[186,0,224,0],[187,0,225,0],[188,0,226,0],[189,0,227,0],[190,0,228,0],[191,0,229,0],[192,0,230,0],[193,0,231,0],[194,2,232,7],[194,11,232,16,"useMMKVListener"],[194,26,232,31,"useMMKVListener"],[194,27,233,2,"valueChangedListener"],[194,47,233,45],[194,49,234,2,"instance"],[194,57,234,17],[194,59,235,8],[195,4,236,2],[195,8,236,8,"ref"],[195,11,236,11],[195,14,236,14],[195,18,236,14,"useRef"],[195,31,236,20],[195,33,236,21,"valueChangedListener"],[195,53,236,41],[195,54,236,42],[196,4,237,2,"ref"],[196,7,237,5],[196,8,237,6,"current"],[196,15,237,13],[196,18,237,16,"valueChangedListener"],[196,38,237,36],[197,4,239,2],[197,8,239,8,"mmkv"],[197,12,239,12],[197,15,239,15,"instance"],[197,23,239,23],[197,27,239,27,"getDefaultInstance"],[197,45,239,45],[197,46,239,46],[197,47,239,47],[198,4,241,2],[198,8,241,2,"useEffect"],[198,24,241,11],[198,26,241,12],[198,32,241,18],[199,6,242,4],[199,10,242,10,"listener"],[199,18,242,18],[199,21,242,21,"mmkv"],[199,25,242,25],[199,26,242,26,"addOnValueChangedListener"],[199,51,242,51],[199,52,242,53,"changedKey"],[199,62,242,63],[199,66,242,68],[200,8,243,6,"ref"],[200,11,243,9],[200,12,243,10,"current"],[200,19,243,17],[200,20,243,18,"changedKey"],[200,30,243,28],[200,31,243,29],[201,6,244,4],[201,7,244,5],[201,8,244,6],[202,6,245,4],[202,13,245,11],[202,19,245,17,"listener"],[202,27,245,25],[202,28,245,26,"remove"],[202,34,245,32],[202,35,245,33],[202,36,245,34],[203,4,246,2],[203,5,246,3],[203,7,246,5],[203,8,246,6,"mmkv"],[203,12,246,10],[203,13,246,11],[203,14,246,12],[204,2,247,0],[205,0,247,1],[205,3]],"functionMap":{"names":["<global>","isConfigurationEqual","getDefaultInstance","useMMKV","createMMKVHook","<anonymous>","useMemo$argument_0","set","useEffect$argument_0","mmkv.addOnValueChangedListener$argument_0","setBump$argument_0","createMMKVHook$argument_0","useMMKVObject","setValue","setJson$argument_0","useMMKVListener"],"mappings":"AAA;ACI;CDY;AEG;CFK;OGW;CHe;AIE;SCK;0BCO;KDM;MEI;OFuB;cGK;sDCC;kBCE,YD;ODE;aHC,uBG;KHC;GDG;CJC;4CWY;yBXC;4CWa;yBXC;6CWY;0BXC;4CWY;yBXC;OYc;wBNW;GMG;ICG;gBCE;SDM;KDM;CZK;Oee;YPS;oDCC;KDE;WHC,uBG;GOC;CfC"}},"type":"js/module"}]}